import Pfds.Init


/-! # Chapter 4 -/
namespace Pfds.C4



/-! ## Streams

Implemented using `Thunk`-s.
-/


mutual
  inductive StreamCell (Œ± : Type) : Type
  | nil
  | cons : Œ± ‚Üí Stream Œ± ‚Üí StreamCell Œ±
  deriving Inhabited

  inductive Stream (Œ± : Type) : Type
  | mk : Thunk (StreamCell Œ±) ‚Üí Stream Œ±
  deriving Inhabited
end

namespace Stream
  section
    open Lean

    scoped notation "[]" =>
      Stream.mk lazy StreamCell.nil

    scoped syntax:67 (name := consSyntax) term:68 " ::: " term:67 : term

    @[macro consSyntax] def elabCons : Macro
    | `( $hd:term ::: $tl:term ) =>
      `(Stream.mk (lazy StreamCell.cons $hd $tl))
    | _ => Macro.throwUnsupported
  end

  def cell : Stream Œ± ‚Üí Thunk (StreamCell Œ±)
  | mk cell => cell

  def getCell : Stream Œ± ‚Üí StreamCell Œ± :=
    Thunk.get ‚àò cell

  instance instCoeThunk : Coe (Stream Œ±) (Thunk (StreamCell Œ±)) where
    coe := cell
  instance instCoeOfThunk : Coe (Thunk (StreamCell Œ±)) (Stream Œ±) where
    coe := mk
end Stream

open scoped Stream

protected partial def StreamCell.pure (a : Œ±) : StreamCell Œ± :=
  .cons a []

protected partial def Stream.pure : Œ± ‚Üí Stream Œ± :=
  (lazy StreamCell.pure ¬∑)

-- `map`
mutual
  protected partial def StreamCell.map (f : Œ± ‚Üí Œ≤) : StreamCell Œ± ‚Üí StreamCell Œ≤
  | .nil => .nil
  | .cons hd tl => .cons (f hd) (tl.map f)

  protected partial def Stream.map (f : Œ± ‚Üí Œ≤) (s : Stream Œ±) : Stream Œ≤ :=
    lazy s.getCell.map f
end

namespace Stream
  def branch (f_nil : Unit ‚Üí Œ≤) (f_cons : Œ± ‚Üí Stream Œ± ‚Üí Œ≤) (s : Stream Œ±) : Thunk Œ≤ := do
    if let .cons hd tl ‚Üê s.cell
    then f_cons hd tl
    else f_nil ()

  def branchMap
    (f_nil : Unit ‚Üí StreamCell Œ≤)
    (f_cons : Œ± ‚Üí Stream Œ± ‚Üí StreamCell Œ≤)
    (s : Stream Œ±)
  : Stream Œ≤ := .mk do
    if let .cons hd tl ‚Üê s.cell
    then f_cons hd tl
    else f_nil ()

  def consMap
    (f_cons : Œ± ‚Üí Stream Œ± ‚Üí StreamCell Œ≤)
    (s : Stream Œ±)
  : Stream Œ≤ :=
    s.branchMap (ùïÇ .nil) f_cons


  partial def append (s‚ÇÅ s‚ÇÇ : Stream Œ±) : Stream Œ± :=
    s‚ÇÅ.branchMap
      (f_nil := ùïÇ s‚ÇÇ.getCell)
      (f_cons := fun hd tl => .cons hd (tl.append s‚ÇÇ))

  instance instAppend : Append (Stream Œ±) where
    append := append



  def take : Nat ‚Üí Stream Œ± ‚Üí Stream Œ±
  | 0, _ =>
    .mk lazy .nil
  | n + 1, s =>
    s.consMap fun hd tl => .cons hd (tl.take n)

  partial def takeToList (n : Nat) (s : Stream Œ±) : List Œ± :=
    aux n s.getCell
  where
    aux : Nat ‚Üí StreamCell Œ± ‚Üí List Œ±
    | 0, _
    | _, .nil => .nil
    | n + 1, .cons hd tl => hd :: (aux n $ tl.getCell)

  #guard [].takeToList 0 = .nil (Œ± := Unit)
  #guard [].takeToList 10 = .nil (Œ± := Unit)
  #guard (0:::0:::0:::0:::0:::[]).takeToList 0 = .nil
  #guard (0:::0:::0:::0:::0:::[]).takeToList 1 = [0]
  #guard (0:::0:::0:::0:::0:::[]).takeToList 3 = [0, 0, 0]
  #guard (0:::0:::0:::0:::0:::[]).takeToList 5 = [0, 0, 0, 0, 0]
  #guard (0:::0:::0:::0:::0:::[]).takeToList 9 = [0, 0, 0, 0, 0]



  partial def drop (n : Nat) (s : Stream Œ±) : Stream Œ± := .mk lazy
    match (n, s.getCell) with
    | (0, c) => c
    | (_, .nil) => .nil
    | (n + 1, .cons _hd tl) =>
      (tl.drop n).getCell

  def getVal (s : Stream Œ±) : Option Œ± :=
    if let .cons hd _ := s.getCell
    then hd else none

  partial def get : Nat ‚Üí Stream Œ± ‚Üí Option Œ±
  | 0, s => s.getVal
  | n + 1, s =>
    if let .cons _ s := s.getCell
    then s.get n else none

  /-- Reverses a stream, will not be able to yield values on infinite streams. -/
  partial def reverse : Stream Œ± ‚Üí Stream Œ± :=
    aux []
  where
    aux (acc s : Stream Œ±) : Stream Œ± :=
      s.branchMap
        (fun _ => acc.getCell)
        (fun hd tl =>
          let acc := hd ::: acc
          aux acc tl |>.getCell)


  partial def forever (val : Œ±) : Stream Œ± := .mk lazy
    .cons val (forever val)

  #guard (forever 0).takeToList 7 = List.replicate 7 0
  #guard (forever 0).takeToList 10 = List.replicate 10 0



  partial def fib : Stream Nat :=
    1 ::: 1 ::: aux 1 1
  where
    aux (pre‚ÇÇ pre‚ÇÅ : Nat) : Stream Nat := .mk lazy
      let val := pre‚ÇÇ + pre‚ÇÅ
      .cons val (aux pre‚ÇÅ val)

  #guard fib.takeToList 10 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

  partial def fact : Stream Nat :=
    aux 1 2
  where
    aux (pre idx : Nat) : Stream Nat := .mk lazy
      let val := pre * idx
      .cons val (aux val idx.succ)
end Stream
