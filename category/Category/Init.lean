import Mathlib



/-!
# Useful helpers

Contains the actual category class `Cat`.
-/



/-! ## Constant combinator -/

abbrev ùïÇ
  {Œ± : Sort u}
  {Œ≤ : Sort v}
  (val : Œ≤)
: Œ± ‚Üí Œ≤ :=
  fun _ => val



/-! ## Defining categories -/



--- A category with objects of type `Object`.
@[reducible]
class Cat
  (Object : Sort o)
  (OSem : outParam (Object ‚Üí Sort osem))
  (Arrow : Object ‚Üí Object ‚Üí Sort a)
  (ASem : outParam (Object ‚Üí Object ‚Üí Sort asem))
where
  --- Arrow composition.
  compose {Œ± Œ≤ Œ≥} :
    Arrow Œ≤ Œ≥ ‚Üí Arrow Œ± Œ≤ ‚Üí Arrow Œ± Œ≥

  --- Arrow concretization.
  aConcrete :
    (A : Arrow Œ± Œ≤) ‚Üí ASem Œ± Œ≤

  -- aConcrete_distributive
  --   {Œ± Œ≤ Œ≥}
  --   (f : Arrow Œ≤ Œ≥)
  --   (g : Arrow Œ± Œ≤)
  -- : aConcrete (compose f g) = compose (aConcrete f) (aConcrete g)

  --- Arrow composition is associative.
  compose_assoc {Œ± Œ≤ Œ≥ Œ¥} (f : Arrow Œ≥ Œ¥) (g : Arrow Œ≤ Œ≥) (h : Arrow Œ± Œ≤) :
    aConcrete (compose f (compose g h))
    =
    aConcrete (compose (compose f g) h)

  --- Identity, careful not to shadow `id`.
  protected id {Œ± : outParam Object} :
    Arrow Œ± Œ±
  --- `id ‚àò f` is `f`.
  id_compose (f : Arrow Œ± Œ≤) :
    aConcrete (compose id f) = aConcrete f
  --- `f ‚àò id` is `f`.
  compose_id (f : Arrow Œ± Œ≤) :
    aConcrete (compose f id) = aConcrete f


class Cat.Abstract
  (Object : Sort o)
  (Arrow : Object ‚Üí Object ‚Üí Sort a)
extends
  Cat Object (ùïÇ Object) Arrow Arrow
where
  aConcrete a := a



--- Nice notation for `Cat.Arrow`, enter `\r=`.
infixr:80 " ‚áí " => Cat.Arrow
--- Usual function composition.
infixr:80 " ‚àòc " => Cat.compose



--- Category **0** with no objects and no arrows.
def Cat.zero : Cat.Abstract Empty (fun _ _ => Unit) where
  id :=
    by intros ; contradiction
  compose :=
    by intros ; contradiction
  compose_assoc :=
    by intros ; contradiction
  id_compose :=
    by intros ; contradiction
  compose_id :=
    by intros ; contradiction



--- Category **1** with one object and its identity arrow.
def Cat.one : Cat.Abstract Unit (fun _ _ => Unit) where
  compose _ _ :=
    ()
  compose_assoc _ _ _ :=
    rfl
  id :=
    ()
  id_compose _ :=
    rfl
  compose_id _ :=
    rfl



--- Empty structure that stores two booleans as type parameters.
---
--- This is going to be the arrow for category `Cat.two`.
@[reducible]
structure Cat.two.Arrow (b‚ÇÅ b‚ÇÇ : Bool)

--- Category **2** with two objects, two identity arrows, and an arrow from one object to the other.
def Cat.two : Cat.Abstract Bool two.Arrow where
  compose _ _ := {}
  compose_assoc _ _ _ :=
    rfl
  id := {}
  id_compose _ :=
    rfl
  compose_id _ :=
    rfl



--- Objects of the category **3**.
inductive Cat.three.Object
| A
| B
| C

--- Arrows of the category **3**.
structure Cat.three.Arrow (o‚ÇÅ o‚ÇÇ : Cat.three.Object)

--- Category **3** with three objects `A`, `B` and `C`.
---
--- Besides the three identity arrows, we have `A ‚Üí B`, `B ‚Üí C`, and `C ‚Üí A`.
def Cat.three : Cat.Abstract three.Object three.Arrow where
  compose _ _ := {}
  compose_assoc _ _ _ :=
    rfl
  id := {}
  id_compose _ :=
    rfl
  compose_id _ :=
    rfl



--- Dual of a category.
instance Cat.Abstract.dual
  (cat : Cat.Abstract Object Arrow)
: Cat.Abstract Object (fun Œ± Œ≤ => Arrow Œ≤ Œ±) where
  compose f g :=
    cat.compose g f
  compose_assoc f g h :=
    by
      simp
      rw [cat.compose_assoc h g f]

  id := cat.id
  id_compose :=
    cat.compose_id
  compose_id :=
    cat.id_compose

--- Applying `Dual` two times yields the original.
theorem Cat.Abstract.dual_dual
  (cat : Cat.Abstract Object Arrow)
: cat.dual.dual = cat :=
  rfl



instance Cat.Prod
  (cat‚ÇÅ : Cat O‚ÇÅ OSem‚ÇÅ A‚ÇÅ ASem‚ÇÅ)
  (cat‚ÇÇ : Cat O‚ÇÇ OSem‚ÇÇ A‚ÇÇ ASem‚ÇÇ)
: Cat
  (PProd O‚ÇÅ O‚ÇÇ)
  (fun ‚ü®o‚ÇÅ, o‚ÇÇ‚ü© => OSem‚ÇÅ o‚ÇÅ √ó OSem‚ÇÇ o‚ÇÇ)
  (fun ‚ü®Œ±‚ÇÅ, Œ±‚ÇÇ‚ü© ‚ü®Œ≤‚ÇÅ, Œ≤‚ÇÇ‚ü© => PProd (A‚ÇÅ Œ±‚ÇÅ Œ≤‚ÇÅ) (A‚ÇÇ Œ±‚ÇÇ Œ≤‚ÇÇ))
  (fun ‚ü®Œ±‚ÇÅ, Œ±‚ÇÇ‚ü© ‚ü®Œ≤‚ÇÅ, Œ≤‚ÇÇ‚ü© => PProd (ASem‚ÇÅ Œ±‚ÇÅ Œ≤‚ÇÅ) (ASem‚ÇÇ Œ±‚ÇÇ Œ≤‚ÇÇ))
where
  aConcrete a :=
    ‚ü®cat‚ÇÅ.aConcrete a.1, cat‚ÇÇ.aConcrete a.2‚ü©
  compose f g :=
    ‚ü®cat‚ÇÅ.compose f.1 g.1, cat‚ÇÇ.compose f.2 g.2‚ü©
  compose_assoc {Œ± Œ≤ Œ≥ Œ¥} f g h :=
    let res : _ ‚àß _ :=
      ‚ü®cat‚ÇÅ.compose_assoc f.1 g.1 h.1, cat‚ÇÇ.compose_assoc f.2 g.2 h.2‚ü©
    by
      simp [res]
  id :=
    ‚ü®cat‚ÇÅ.id, cat‚ÇÇ.id‚ü©
  id_compose f :=
    let res : _ ‚àß _ :=
      ‚ü®cat‚ÇÅ.id_compose f.1, cat‚ÇÇ.id_compose f.2‚ü©
    by
      simp [res]
  compose_id f :=
    let res : _ ‚àß _ :=
      ‚ü®cat‚ÇÅ.compose_id f.1, cat‚ÇÇ.compose_id f.2‚ü©
    by
      simp [res]



namespace Cat.UpArrow
  universe
    o osem
    a asem

  variable

    {Object : Sort o}
    {ASem : Object ‚Üí Object ‚Üí Sort asem}

    (A : Object ‚Üí Object ‚Üí Sort a)



  inductive Obj
    (A : Object ‚Üí Object ‚Üí Sort a)
  : Sort (max 1 o a)
    | mk : A Œ± Œ≤ ‚Üí Obj A

  def Obj.dom : Obj A ‚Üí Object
    | @Obj.mk _ _ Œ± _Œ≤ _ =>
      Œ±
  def Obj.cod : Obj A ‚Üí Object
    | @Obj.mk _ _ _Œ± Œ≤ _ =>
      Œ≤
  def Obj.get : Obj A ‚Üí ((Œ± : Object) √ó' (Œ≤ : Object) √ó' A Œ± Œ≤)
    | @Obj.mk _ _ Œ± Œ≤ a =>
      ‚ü®Œ±, Œ≤, a‚ü©
  def Obj.getFun : (self : Obj A) ‚Üí A self.dom self.cod
    | @Obj.mk _ _ _Œ± _Œ≤ a =>
      a

  def Obj.Concrete
    (ASem : Object ‚Üí Object ‚Üí Sort asem)
    (self : Obj A)
  : Sort asem :=
    ASem self.dom self.cod



  variable
    {OSem : Object ‚Üí Sort osem}
    (cat : Cat Object OSem A ASem)

  structure Arrow
    (Œ± Œ≤ : Obj A)
  : Sort (max 1 o a)
  where
    a : A Œ±.dom Œ≤.dom
    b : A Œ±.cod Œ≤.cod
    legal :
      let f :=
        Œ±.getFun
      let f' :=
        Œ≤.getFun
      cat.compose f' a
      =
      cat.compose b f

  def Arrow.Concrete
    (ASem : Object ‚Üí Object ‚Üí Sort asem)
    (Œ± Œ≤ : Obj A)
  : Sort asem :=
    ASem Œ±.dom Œ≤.cod

  def Arrow.concrete
    (self : Arrow A (cat := cat) Œ± Œ≤)
  : ASem Œ±.dom Œ≤.cod :=
    let a :=
      self.a (cat := cat)
    let f' :=
      Œ≤.getFun
    cat.compose f' a
    |> cat.aConcrete

  def Arrow.compose
    {Œ± Œ≤ Œ≥}
    (f : Arrow A cat Œ≤ Œ≥)
    (g : Arrow A cat Œ± Œ≤)
  : Arrow A cat Œ± Œ≥ where
    a :=
      cat.compose f.a g.a
    b :=
      cat.compose f.b g.b
    legal :=
      let legal_f := f.legal
      let legal_g := g.legal
      by
        simp at legal_f
        simp at legal_g
        simp
        sorry
end Cat.UpArrow


/-- Given `cat`, builds `cat‚ü∂` (upperscript arrow, dunno how to unicode it). -/
instance Cat.UpArrow
  [cat : Cat O OSem A ASem]
: Cat
  (UpArrow.Obj A)
  (UpArrow.Obj.Concrete A ASem)
  (UpArrow.Arrow A cat)
  (UpArrow.Arrow.Concrete A ASem)
where
  aConcrete :=
    UpArrow.Arrow.concrete A cat

  compose :=
    by sorry
  compose_assoc :=
    by sorry

  id :=
    by sorry
  id_compose :=
    by sorry
  compose_id :=
    by sorry
